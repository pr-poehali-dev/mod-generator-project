'''
Business: Compiles generated Minecraft mod code into JAR file
Args: event - dict with httpMethod, body containing mod_id
      context - object with request_id attribute
Returns: HTTP response with download URL for compiled JAR
'''

import json
import os
from typing import Dict, Any
import psycopg2
import zipfile
import io
import base64

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    method: str = event.get('httpMethod', 'GET')
    
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type',
                'Access-Control-Max-Age': '86400'
            },
            'body': '',
            'isBase64Encoded': False
        }
    
    if method != 'POST':
        return {
            'statusCode': 405,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': 'Method not allowed'}),
            'isBase64Encoded': False
        }
    
    body_data = json.loads(event.get('body', '{}'))
    mod_id = body_data.get('mod_id', '')
    
    if not mod_id:
        return {
            'statusCode': 400,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': 'mod_id is required'}),
            'isBase64Encoded': False
        }
    
    conn = psycopg2.connect(os.environ.get('DATABASE_URL'))
    cur = conn.cursor()
    
    cur.execute("SELECT name, generated_code, minecraft_version FROM mods WHERE id = %s", (mod_id,))
    result = cur.fetchone()
    
    if not result:
        cur.close()
        conn.close()
        return {
            'statusCode': 404,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': 'Mod not found'}),
            'isBase64Encoded': False
        }
    
    mod_name, generated_code, minecraft_version = result
    
    package_name = mod_name.lower().replace(' ', '_').replace('-', '_')
    jar_data = create_jar_file(mod_name, package_name, generated_code)
    
    jar_base64 = base64.b64encode(jar_data).decode('utf-8')
    
    cur.execute(
        "UPDATE mods SET status = %s, file_url = %s WHERE id = %s",
        ('ready', jar_base64, mod_id)
    )
    conn.commit()
    
    cur.close()
    conn.close()
    
    return {
        'statusCode': 200,
        'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
        'body': json.dumps({
            'mod_id': mod_id,
            'status': 'ready',
            'jar_data': jar_base64,
            'filename': f'{package_name}.jar'
        }),
        'isBase64Encoded': False
    }

def create_jar_file(mod_name: str, package_name: str, code: str) -> bytes:
    jar_buffer = io.BytesIO()
    
    with zipfile.ZipFile(jar_buffer, 'w', zipfile.ZIP_DEFLATED) as jar:
        manifest = f'''Manifest-Version: 1.0
Implementation-Title: {mod_name}
Implementation-Version: 1.0.0
Created-By: ModCraft AI
'''
        jar.writestr('META-INF/MANIFEST.MF', manifest)
        
        mods_toml = f'''modLoader="javafml"
loaderVersion="[47,)"
license="MIT"

[[mods]]
modId="{package_name}"
version="1.0.0"
displayName="{mod_name}"
description="Generated by ModCraft AI"
'''
        jar.writestr('META-INF/mods.toml', mods_toml)
        
        class_name = mod_name.replace(' ', '').replace('-', '')
        class_path = f'com/generated/{package_name}/{class_name}Mod.java'
        jar.writestr(class_path, code)
        
        readme = f'''# {mod_name}

Generated by ModCraft AI
Minecraft Mod - Ready to use!

To install:
1. Install Minecraft Forge
2. Place this JAR in your mods folder
3. Launch Minecraft

Enjoy your mod!
'''
        jar.writestr('README.txt', readme)
    
    return jar_buffer.getvalue()
